{
  "html": [
    {
      "id": 1,
      "text": "Який тег використовується для створення посилання?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Якій тег використовується для вставки зображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Який тег знаходится в <html> та викорисовується для заголовока документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Який атрибут використовуется для визначення альтернативного текста зображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Який атрибут дозволяє відкрити посилання в новій вкладці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Для чого використовується атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder'використовується для зображення текстової підказки, або автоматичне введення в поле форми до того, як користувач почне вводити свої дані."
    },
    {
      "id": 7,
      "text": "Як створити нумерований список в HTML?",
      "hasOptions": false,
      "answer": "Для створеннятакого списка в HTML використовується тег <code>ul</code>, а для виконня кожного пункту списка - тег <code>li</code>."
    },
    {
      "id": 8,
      "text": "Що таке HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - це стандартизирована мова розміткі, яка використовується в створеня і розробці веб-сторінок.\nЦе система для розмітки окремих частин веб-сторінки з використанням тегів , обгорнуті в бокові лапки."
    },
    {
      "id": 9,
      "text": "Що робить тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Це декларація, яка повідомляє веб-браузер о версії мови розмітки, використовується пристворені веб-сторінки. Це допомогає браузеру конкретно відобразити дану сторінку."
    },
    {
      "id": 10,
      "text": "Який тег використовується для створення таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який тег використовується для створення заголовка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який тег використовується для створення рядка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Який тег використовується для створення комірки таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Що таке семантичні теги в HTML?",
      "hasOptions": false,
      "answer": "Семантичні теги в HTML - це теги, які передають інформацию про сенс або призначення вмісту, а не тільки про його зовнішній вигляд. \nПрикладами семантичних тегів: header, footer, article, section, nav и др. \nВони допомогають створювати більш структуровані и доступні веб-сторінки."
    },
    {
      "id": 15,
      "text": "Який атрибут використовується для встановлення фонового зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Який тег використовується для створення випадающчого списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Який тег використовується для вставки JavaScript код в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Який атрибут використовується для вказівки шляху до зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Що робить атрибут 'readonly' в елементі форми?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' робить елемент форми тільки для читання, яка означає, що користувач не може змінювати значення елемента, але може переглядати його. \nЦе може бути корисно, якщо ви хочети відобразити інформацію, яка не повина бути змінена."
    },
    {
      "id": 20,
      "text": "Що таке веб-стандарти і для чого вони потрібні?",
      "hasOptions": false,
      "answer": "Веб-стандарти - це рекомендації, розроблені групами стандартів, такими як W3C або WHATWG, для забеспечиння сумісності і стійкості веб-технологі. \nВони включають рекомендаціх по HTML, CSS, JavaScript та інших веб-технологіях. \nВиконання веб-стандартів допомогає забеспечити коректну работу веб-сторінці в різних браузерах і пристроях, а також полегшити обслуговування та розширення веб-сайтів в майбутньому."
    },
    {
      "id": 21,
      "text": "Що таке відгукуючий (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Це підхід до веб-дизайну, який длозволяє веб-сторінкам коректно відображатися та функціонувати на різних пристроях, тобто мобільніх телефонах, планшетах та настільних компютерах, шляхом використання гнучких макетів, гнучких зображень и CSS медіазапитів для адаптації дизайна для різних розмірів екрана та різних харатеристиках пристроїв."
    },
    {
      "id": 22,
      "text": "Який тег HTML використовується для вставки відео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Який тег викороистовується для створення гловного заголовку на веб-сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Що робить тег <br>?",
      "hasOptions": false,
      "answer": " Він використовується для переносу , що дозволяє творювати новий рядок в тому місці, де він розміщується. Це зручний спосіб керувати розміенням текста на веб-сторінці без використання додаткових стилів або элементів."
    },
    {
      "id": 25,
      "text": "Який тег використовується для створення упорядкованого списку?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Що таке DOM в контексті веб-разрабки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - це програмний інтерфейс для веб-документів. Тобто представлення структиризованого документа в вигляді об'єктної моделі, яка дозволяє програмам і скриптам взаємодіяти з вмістом, строктури та стилів веб-сторінки. DOM предсталяє документ як дерево об'єктів, кажний з яких відповідає відповідній частині сторінки."
    },
    {
      "id": 27,
      "text": "Який атрибут використовується для виначення стілив документа  на сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Що таке атрибут 'alt' в тегу <img>?",
      "hasOptions": false,
      "answer": "Він вказує альтернативний текст для зображення (картинки). Цей текст відображається у веб-сторінці, якщо зображення не може бути завантажено або якщо користувач використовує програму для читання екрану. Крім цього, 'alt' корисний для пошукових систем, оскільки він допомагає зрозуміти зміст зображення. Також цей текст може надати контекст для тих, хто не бачить зображення, наприклад, людям з вадами зору."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чому різниця між «обнуляцією» і «нормалізацією» CSS? Щоб вибрали ви і чому?",
      "hasOptions": false,
      "answer": "Обнулення (Reset): Зазвичай використовується випадках, коли розробник хоче почати стилювання з чистого аркуша та повністю контролювати стиль сторінки. Важливо враховувати, що обнулення може вимагати більшої кількості роботи для встановлення базових стилів. Нормалізація (Normalize): \nРекомендується для проектів, які прагнуть забезпечити більш однорідний вигляд сторінок у різних браузерах, при цьому зберігаючи деяку консистентність зі стандартними стилями браузера. \nНормалізація полегшує роботу з базовими стилями. Обидва підходи мають свої переваги, і вибір залежить від потреб конкретного проекту та ступеня контролу, який ви бажаєте мати над стилями. \nВажливо також враховувати, що обидва підходи можуть бути використані одночасно: спочатку використовувати нормалізацію для покращення базових стилів браузера, а потім застосовувати власні стилі або обнулення, якщо це необхідно для конкретного дизайну."
    },
    {
      "id": 2,
      "text": "Що таке специфічність селекторів CSS і як вона працює?",
      "hasOptions": false,
      "answer": "Специфічність селекторів CSS визначає, який стиль буде застосовуватися до елементу, коли виникає конфлікт між різними правилами стилю для того ж елемента. Специфічність використовується для вирішення питання, які стилі мають більший пріоритет, коли їхні правила конфліктують."
    },
    {
      "id": 3,
      "text": "Що означає абревіатура CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - це мова, яка використовується для оформлення та стилізації веб-сторінок. Вона дозволяє визначити зовнішній вигляд веб-елементів, таких як тексти, фони, межі, розташування і багато іншого, щоб зробити сторінки більш привабливими та функціональними для користувачів. CSS використовує каскадну модель, що означає, що стилі можуть бути успадковані та перевизначені, дозволяючи розробникам створювати структуровані та консистентні дизайни для веб-сайтів."
    },
    {
      "id": 4,
      "text": "Чому, як правело, ліпше розташувати підключення CSS в <head>, а <script> перед тэгом </body>? Чи знаєте ви які-небудь виключення, наведи приклади",
      "hasOptions": false,
      "answer": "Розташування підключення CSS в теґу <head> та включення <script> перед теґом </body> є рекомендованими практиками з огляду на оптимізацію завантаження веб-сторінок та коректну роботу браузера. CSS розташовують у <head>, оскільки він впливає на вигляд сторінки. <script> краще розміщувати перед </body>, щоб покращити завантаження сторінки та продуктивність."
    },
    {
      "id": 5,
      "text": "Як працює властивість 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "'Властивість 'z-index' в CSS визначає порядок накладання шарів на сторінці. Вищий 'z-index' означає, що елемент розташований над іншими. Елементи з 'z-index' встановлюються для елементів з позиціонуванням (наприклад, position: relative, position: absolute) і впорядковуються за значеннями 'z-index'. Якщо 'z-index' не вказано, використовується значення за замовчуванням, і елементи впорядковуються в порядку їхнього вкладення в HTML або в тому порядку, в якому вони визначені в CSS."
    },
    {
      "id": 6,
      "text": "Які є способи відцентрувати div?",
      "hasOptions": false,
      "answer": "Центрування блока <div> можна досягти різними способами залежно від конкретних вимог та вимірювань центрування. Ось кілька способів: \n1.Центрування за допомогою margin: auto: `margin: 0 auto;`.\n2. Центрування по горизонталі та вертикалі за допомогою flexbox: `display: flex; justify-content: center; align-items: center;`.\n3.  `display: grid; place-items: center;`.\n4. Центрування за допомогою text-align та vertical-align: `text-align: center;`  `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Якою властивістю можна змінити фоновий колір в CSS??",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Якою властивістю можна задати зовнішні відступи для елемента в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Як задати шрифт тексту в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Яка властивість CSS дозволяєконтролювати видимість елемента в DOM, але при цьому зберігає її місце?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Яка властивість CSS використовується для установки тінні елементів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який селектор вибирає всі елементи .child, які являются безпосередньо дочірніми элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який селектор CSS ввбирає всі елементи, які мають вказаний атрибут, починаються з визаченого рядка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Який селектор CSS ввбирає всі елементи, які имеют вказаний атрибут, закінчуються з визаченого рядка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Що таке чиста функція?",
      "hasOptions": false,
      "answer": "Це функція, яка завжди повертає одне і те ж значення при одних і тих самих вхідних даних і не має побічних ефектів, таких як зміна глобальних змінних або виведення на екран. (side effects)"
    },
    {
      "id": 2,
      "text": "Що таке замикання (closure)?",
      "hasOptions": false,
      "answer": "Замикання (closure) в JavaScript - це функція, яка зберігає доступ до змінних зі свого оточення (обсягу видимості), дозволяючи цим змінним існувати поза своїм первинним контекстом."
    },
    {
      "id": 3,
      "text": "let VS const: чому краще використовувати const, коли це потрібно?",
      "hasOptions": false,
      "answer": "const та let - це ключові слова для оголошення змінних в JavaScript. const вказує на те, що змінну не можна переприсвоювати після її оголошення, тоді як let дозволяє змінювати значення змінної. Вибір між const та let залежить від потреб конкретного використання:\n1)Використовуйте const, коли змінна не має змінюватися після оголошення. const робить ваш код більш безпечним і допомагає уникнути непередбачених змін у значеннях змінних. \nВикористання const допомагає створити код, який легше розуміти, підтримувати та визначити. Важливо враховувати, що const не робить об'єкти (наприклад, масиви) необмежено незмінними, ви можете змінювати їхні вміст, але не можна переприсвоювати новий об'єкт константій змінній.."
    },
    {
      "id": 4,
      "text": "Що таке (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "У JavaScript, об'єкт Promise (обіцянка) використовується для роботи з асинхронним кодом. Він представляє собою обіцянку (promise) в майбутньому повернути результат асинхронної операції. Об'єкт Promise може перебувати в одному з трьох станів: \nPending (очікування): \n1. Початковий стан, коли обіцянка створена, але результат ще не готовий. \n2. Fulfilled (виконано): Стан, коли асинхронна операція завершилася успішно, і результат доступний. \n3. Rejected (відхилено): Стан, коли асинхронна операція завершилася з помилкою або відхиленням, і вказується причина відхилення.  " 
    },
    {
      "id": 5,
      "text": "Що таке деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризація (destructuring) в JavaScript - це синтаксична можливість отримувати окремі значення або властивості об'єктів та масивів та присвоювати їх змінним. Це дозволяє зручно отримувати доступ до вкладених даних без необхідності вручну витягати кожну властивість. \nДеструктуризація також може використовуватися в параметрах функцій для отримання конкретних значень або властивостей об'єктів безпосередньо в аргументах функції.\nДеструктуризація робить код більш зрозумілим, компактним і зручним для роботи зі складними структурами даних, такими як об'єкти та масиви."
    },
    {
      "id": 6,
      "text": "Що таке стрілочна функція в JavaScript?",
      "hasOptions": false,
      "answer": "Стрілочна функція (arrow function) в JavaScript - це коротший та більш лаконічний синтаксис для створення функцій. Вона була введена в стандарті ECMAScript 6 (ES6) і надає можливість створювати функції швидше та зменшує необхідність в писанні деякого виду ключових слів. Основні особливості стрілочних функцій: \n1. Короткий синтаксис: Стрілочні функції дозволяють визначити функцію в більш короткому вигляді.'n2. Збереження контексту: Вони автоматично зберігають контекст (значення this), що є корисним у вкладених функціях. \n3. Відсутність власного this: Вони не мають свого власного this, і використовують this батьківської функції. \n4. Відсутність arguments: Вони не мають об'єкта arguments. \nСтрілочні функції зазвичай використовуються для коротких та простих функцій, особливо в контексті функціонального програмування, обробки масивів та інших ситуацій, де зручно користуватися лаконічним синтаксисом."
    },
    {
      "id": 7,
      "text": "Що таке hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Який метод використовуєтьсяя для додавання елемента в масив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Який об'єкт представляє поточне вікно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Який оператор використовується для порівняння на строгу рівність?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який метод використовується для видалення останнього елемента з масиву?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який метод JavaScript використовується для перетворення об'єкта в рядок JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який об'єкт у JavaScript використовується для роботи з датою та часом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Який метод масиву JavaScript використовується для фільтрації елементів за певним критерієм?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Що таке React JS?",
      "hasOptions": false,
      "answer": "React, також відомий як React.js або ReactJS, це бібліотека JavaScript для створення інтерфейсів користувача. Вона розроблена Facebook і використовується для побудови веб-застосунків з інтерактивним та динамічним вмістом. Основні особливості та характеристики React включають:\n1)Компонентна архітектура: React сприяє побудові веб-інтерфейсу через компоненти, які можна використовувати повторно та складати разом для створення складних UI.;\n2)Віртуальний DOM (Virtual DOM): React використовує віртуальний DOM для оптимізації оновлення сторінки. Він реагує на зміни даних та оновлює тільки ті частини сторінки, які дійсно змінилися. ;\n3) Односторінковий додаток (Single-Page Application, SPA): React дозволяє створювати SPA, де сторінка не перезавантажується під час навігації, що створює більш інтерактивні додатки. \n4)JSX (JavaScript XML): React використовує синтаксис JSX, який дозволяє вбудовувати HTML-подібний код безпосередньо в JavaScript, полегшуючи створення компонентів. \n5) Клієнт-серверна взаємодія: React може легко взаємодіяти з сервером, завантажуючи або відправляючи дані асинхронно, що робить його ідеальним для SPA. \n6 Велике співтовариство: React має широке та активне співтовариство, що означає доступ до багатої документації та сторонніх бібліотек. \n)React став популярним інструментом для розробки веб-додатків завдяки своїй продуктивності, ефективності та розширюваності. Він часто використовується спільно з іншими технологіями, такими як Redux для керування станом додатку, і React Native для розробки мобільних додатків."
    },
    {
      "id": 2,
      "text": "Для чого потрібний атрибут key при рендері списків?",
      "hasOptions": false,
      "answer": "Атрибут key в React використовується для ідентифікації унікальних елементів в списку компонентів під час їх рендерингу. Він допомагає React визначити, які елементи були додані, видалені або змінені в масиві компонентів, що дозволяє забезпечити ефективні та оптимізовані оновлення DOM. \nОсновні причини використання атрибуту key: \n1)Ідентифікація елементів: key вказує React, який елемент відповідає якому компоненту в попередньому та новому списку. Це важливо для правильної реакції на зміни в списку.\n2)Уникнення реініціалізації: Використання key допомагає уникнути непотрібної перерендерізації компонентів та зберігає їх стан між оновленнями.\n3)Оптимізація процесу відображення: З допомогою key React може ефективно визначити, які елементи змінилися та потребують оновлення, що сприяє швидшому та продуктивнішому відображенню."
    },
    {
      "id": 3,
      "text": "Як працює пропс children?",
      "hasOptions": false,
      "answer": ""
    },
    {
      "id": 4,
      "text": "Що таке портали у React?",
      "hasOptions": false,
      "answer": "Портали (portals) у React - це механізм, який дозволяє вбудовувати компоненти в інші частини DOM-структури, які знаходяться за межами батьківського компонента. Це корисно, коли вам потрібно рендерити компоненти в кореневому рівні DOM або в інших контейнерах поза компонентом, який їх створив. \nОсновні особливості порталів:\n1)Вбудовування в інші частини DOM: Портали дозволяють вбудовувати компоненти в будь-яку частину DOM, навіть поза кореневим елементом, в якому відбувається рендер основного React-дерева.\n2)Збереження стану та контексту: Компоненти, які рендеряться через портали, зберігають свій стан та контекст, незалежно від того, де вони фізично вбудовані в DOM. \n3)Простий синтаксис: Використання порталів в React виглядає дуже схоже на звичайний рендер компонентів, і для цього використовується функція ReactDOM.createPortal()."
    },
    {
      "id": 5,
      "text": "Що таке Reconciliation (Звірка)?",
      "hasOptions": false,
      "answer": "В контексті React, термін 'Reconciliation' або 'звірка' відноситься до процесу порівняння віртуального DOM (Virtual DOM) з попереднім станом та поновлення реального DOM згідно змін, які відбулися в віртуальному DOM. \nОсновні ідеї звірки в React включають:\n1)Віртуальний DOM: Після змін у компонентах React створює новий віртуальний DOM, який представляє оновлений стан інтерфейсу.\n2)Звірка станів: React порівнює новий віртуальний DOM з попереднім, ідентифікуючи, які частини інтерфейсу змінилися.\n3)Поновлення DOM: Відбувається оновлення реального DOM лише тих частин, які змінилися, замість повного перерендерингу всього дерева. \nЦей процес Звірки робить оновлення інтерфейсу більш продуктивним та швидким, оскільки React виконує оптимізації та визначає, які частини потребують оновлення, а які можуть залишитися незмінними. Це важливий аспект того, як React допомагає зберігати продуктивність веб-додатків під час змін стану та властивостей."
    },
    {
      "id": 6,
      "text": "Для чого використовується хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Зберігання стану компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Виконання побічних ефектів",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоізації значень", "isCorrect": false },
        {
          "id": 4,
          "text": "Створення посилань на елементи DOM",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Що буде, якщо другим аргументом в useeffect передати порожній масив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Помилка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect буде запущений 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect буде запущений 1 раз", "isCorrect": true },
        { "id": 4, "text": "Немає правильної відповіді", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Який хук використовується для створення стану у компоненті?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Який елемент використовується для групування елементів без додавання додаткових вузлів DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": " У нас є масив з рядками (arr), кожну з яких ми хочемо відобразити на сторінці. Який метод масиву потрібно використовувати в return компоненті?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Який елемент використовується для обробки помилок в дереві компонентів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який (які) аргумент(и) приймає хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцію и масив залежності", "isCorrect": true },
        { "id": 2, "text": "Функцію и объєкти опцій", "isCorrect": false },
        { "id": 3, "text": "Функцію", "isCorrect": false },
        { "id": 4, "text": "Масив залежностей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чого викоритовується хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Створення посилань на DOM елементи",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Збереження стану компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Виконання побічних ефектів",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоизации функций", "isCorrect": true }
      ]
    }
  ]
}
